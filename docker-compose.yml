version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: coopere-postgres
    restart: always
    environment:
      POSTGRES_DB: cooperevoto
      POSTGRES_USER: coopere
      POSTGRES_PASSWORD: coopere123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coopere -d cooperevoto"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: coopere-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CLUSTER_ID: "your_cluster_id"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - kafka_data:/bitnami/kafka


  api:
    build: .
    container_name: coopere-api
    restart: on-failure
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_LIQUIBASE_ENABLED: "true"

volumes:
  postgres_data:
  kafka_data: